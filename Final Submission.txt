/* Max Masajlo, Ryan Foltz, Zach Volpe  */

-- Task #1 


DROP TABLE customer CASCADE CONSTRAINTS PURGE;
DROP TABLE preference CASCADE CONSTRAINTS PURGE;

CREATE TABLE customer(
    customer_id NUMBER(10) PRIMARY KEY,
    first_name VARCHAR2(30) NOT NULL,
    last_name VARCHAR2(30) NOT NULL,
    email VARCHAR2(30) NOT NULL UNIQUE,
    phone VARCHAR2(10) NOT NULL UNIQUE,
    street VARCHAR2(30) NOT NULL,
    city VARCHAR2(30) NOT NULL,
    state_code CHAR(2) DEFAULT 'CA' NOT NULL,
    zip_code VARCHAR2(30) NOT NULL,
    aquisition_date DATE NOT NULL,
    CHECK(customer_id > 0)
);

INSERT INTO customer (customer_id, first_name, last_name, email, phone, street, city, zip_code, aquisition_date) 
values (1, 'Rick', 'Flair', 'Rickyy123@gmail.com', 2134324425, '123 Kentucky Drive', 'Brownsville', '02366','02/07/2019');

INSERT INTO customer (customer_id, first_name, last_name, email, phone, street, city, zip_code, aquisition_date) 
values (2, 'Bobby', 'Bushay', 'Bobbyyy@gmail.com', 1235554425, '123 Florida Drive', 'Greenssville', '45466','09/09/2020');

INSERT INTO customer (customer_id, first_name, last_name, email, phone, street, city, zip_code, aquisition_date) 
values (4, 'John', 'Daley', 'TooEasyJohn@gmail.com', 4565557777, '786 Slice Alley', 'Dublin', '77466','05/02/2021');

INSERT INTO customer (customer_id, first_name, last_name, email, phone, street, city, zip_code, aquisition_date) 
 values (5, 'Jack', 'Daniels', 'SmoothJack@gmail.com', 2225557777, '542 Blackout Alley', 'Stockton', '77255','06/09/2021');

INSERT INTO customer (customer_id, first_name, last_name, email, phone, street, city, zip_code, aquisition_date) 
values (6, 'Rick', 'James', 'ImRickJamesBitch@gmail.com', 1233217777, '442 WorkAround Alley', 'San Mateo', '72254','09/09/2022');

INSERT INTO customer values (3, 'Tiger', 'Woods', 'BirdieBirdie@gmail.com', 4565554425, '123 Driver court', 'augusta', 'GA' , '45466','04/02/2021');
INSERT INTO customer values (7, 'Ian', 'Thomas', 'IanThomas22@gmail.com', 1243217667, '440 Jolley Street', 'Scottsdale', 'AZ' , '00254','12/09/2022');
INSERT INTO customer values (8, 'Jack', 'Black', 'Bowserxpeaches@gmail.com', 3758762567, '123 Mario Way', 'Franklin', 'NV' , '10554','01/02/2023');
INSERT INTO customer values (9, 'Ryan', 'Garcia', 'MoleinMyCamp@gmail.com', 3218762267, '321 Knockout Way', 'Mayweather', 'NM' , '11224','01/10/2023');
INSERT INTO customer values (10, 'Ricky', 'Bobby', 'IYAFYL@gmail.com', 3228762267, '333 Going Fast Way', 'Talladega', 'AL' , '35160','02/11/2023');

CREATE TABLE preference(
    preference_id NUMBER(10) PRIMARY KEY,
    vehicle_make VARCHAR2(30) NOT NULL,
    vehicle_model VARCHAR2(30),
    max_price NUMBER(10) NOT NULL,
    start_date DATE DEFAULT SYSDATE NOT NULL,
    end_date DATE,
    customer_id NUMBER(10) NOT NULL,
    FOREIGN KEY(customer_id) REFERENCES customer(customer_id),
    CHECK(max_price > 0),
    CHECK(end_date > start_date)   
);

INSERT INTO preference (preference_id, vehicle_make, vehicle_model, max_price, end_date, customer_id) values ( 01, 'Porsche', '911', 70000, '10/10/2030', 7 );
INSERT INTO preference (preference_id, vehicle_make, vehicle_model, max_price, end_date, customer_id) values ( 02, 'Chevrolet', 'corvette', 68000, '10/10/2030', 7 );
INSERT INTO preference (preference_id, vehicle_make, vehicle_model, max_price, end_date, customer_id) values ( 03, 'Ford', 'GTR', 60000, '10/10/2030', 7 );
INSERT INTO preference values (04, 'Ford', 'Raptor', 88000, '01/02/2018', '12/12/2029', 4);
INSERT INTO preference values (05, 'Ford', 'Bronco', 95000, '01/02/2018', '12/12/2029', 4);

INSERT INTO preference values (06, 'BMW', 'M3', 45000, '05/08/2019', '10/07/2025', 1);
INSERT INTO preference values (07, 'Porsche', '911', 95000, '03/12/2017', '08/11/2028', 2);
INSERT INTO preference values (08, 'Ford', 'Bronco', 99000, '01/02/2018', '11/08/2024', 3);

CREATE OR REPLACE VIEW customer_info
AS SELECT first_name ||' '|| last_name "Customer Name", street ||' '|| city ||' '|| state_code ||' '|| zip_code "Address", phone "Phone Number", email "Email"
FROM customer;


CREATE OR REPLACE VIEW customer_preferences ("Customer Name", "Make", "Model", "Maximum Price", "Start Date", "End date")
AS SELECT c.first_name ||' '|| c.last_name, p.vehicle_make, p.vehicle_model, max_price, start_date, end_date
FROM customer c JOIN preference p
ON (c.customer_id = p.customer_id);

CREATE OR REPLACE VIEW all_customer_preferences ("Customer Name", "Phone Number" ,"Make", "Model", "Start Date", "End date")
AS SELECT c.first_name ||' '|| c.last_name,c.phone, NVL(p.vehicle_make, 'No Preference'), p.vehicle_model, start_date, end_date
FROM customer c LEFT OUTER JOIN preference p
ON (c.customer_id = p.customer_id);


-- Task #2

DROP TABLE employee CASCADE CONSTRAINTS PURGE;

CREATE TABLE employee(
    employee_id NUMBER(4) PRIMARY KEY,
    first_name VARCHAR2(30) NOT NULL,
    last_name VARCHAR2(30) NOT NULL,
    street VARCHAR2(30) NOT NULL,
    city VARCHAR2(30) NOT NULL,
    state_code CHAR(2) DEFAULT 'CA' NOT NULL,
    zip_code VARCHAR2(5) NOT NULL,
    phone VARCHAR2(10) UNIQUE NOT NULL,
    email VARCHAR2(30) UNIQUE NOT NULL,
    hire_date DATE NOT NULL,
    job_title VARCHAR2(30) NOT NULL,
    salary NUMBER(10) NOT NULL,
    commission_pct NUMBER(2,2),
    manager_id NUMBER(4) REFERENCES employee(employee_id),
    CHECK(salary > 0),
    CHECK(commission_pct BETWEEN 0.20 AND 0.30),
    CHECK(employee_id >= 1000),
    CHECK(employee_id <> manager_id)
);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary) 
VALUES (1000, 'Larry', 'Margaria', '123 who cares', 'San Luis Obispo', '77322', 1235469234, 'larrymargaria@gmail.com', '10/01/1990', 'Owner/Manager', 1000000 );

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1001, 'Jim', 'Kaney', '321 who cares', 'San Luis Obispo', '77322', 3457891234, 'jimkaney@gmail.com', '10/10/1990', 'Accounting Manager', 999999, 1000);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1002, 'Steve', 'Euro', '567 longview way', 'Santa Maria', '02355', 2348765678, 'steveeuro@gmail.com', '02/12/2000', 'Cashier', 34000, 1001);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1003, 'Alice', 'Credit', '567 weird Al way', 'Santa Maria', '23355', 2349875555, 'alicecredit@gmail.com', '08/12/2009', 'Bookkeeper', 56000, 1001);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1004, 'Norm', 'Allen', '123 Normal Al way', 'Jamestown', '34588', 3211231234, 'normallen@gmail.com', '09/20/2009', 'Service Manager', 300000, 1000);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1005, 'Alan', 'Wrench', '456 North Vermont way', 'Springtown', '98733', 2134325678, 'alanwrench@gmail.com', '12/21/2013', 'Service Worker', 85000, 1004);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1006, 'Woody', 'Apple', '789 swinger court', 'Danville', '45655', 5769234488, 'woodyapple@gmail.com', '11/23/2014', 'Service Worker', 30000, 1004);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id) 
VALUES (1007, 'Sherry', 'Sophmore', '123 Homeless way', 'Jamestown', '34588', 1112223333, 'sherrysophmore@gmail.com', '02/20/2018', 'Cal Poly Intern', 10, 1006);

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id, commission_pct) 
VALUES (1008, 'Mary', 'Long', '456 Who do we appreciate way', 'Livermore', '94588', 7789921234, 'marylong@gmail.com', '09/20/2001', 'Sales Manager', 300000, 1000, .25 );

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id, commission_pct) 
VALUES (1009, 'Adam', 'Packer', '456 Victoria way', 'Franklin', '23477', 5553339966, 'adampacker@gmail.com', '12/21/2011', 'Salesperson', 10000, 1008, .22 );

INSERT INTO employee (employee_id, first_name, last_name, street, city, zip_code, phone, email, hire_date, job_title, salary, manager_id, commission_pct) 
VALUES (1010, 'Larry', 'Jones', '777 Moraga Drive', 'Brentwood', '00022', 1118889999, 'larryjones@gmail.com', '04/06/2010', 'Salesperson', 9000, 1008, .24 );


CREATE OR REPLACE VIEW employee_list
AS SELECT first_name ||' '|| last_name "Employee Name", phone "Phone Number", email "Email"
FROM employee
ORDER BY last_name;


CREATE OR REPLACE VIEW employee_reporting 
AS SELECT manager.first_name ||' '|| manager.last_name "Manager", manager.job_title "Job Title", reportee.first_name ||' '|| reportee.last_name "Reportee", reportee.job_title " Reportee Job Title"
FROM employee Manager JOIN employee reportee
ON (reportee.manager_id = manager.employee_id)
ORDER BY manager.last_name ASC;


-- Task #3 


DROP TABLE service CASCADE CONSTRAINTS PURGE;
DROP TABLE part CASCADE CONSTRAINTS PURGE;

CREATE TABLE service( 
    Service_code varchar2(20) PRIMARY KEY,
    description varchar2(100) NOT NULL,
    cost number(11,2) NOT NULL,
    price number(11,2) NOT NULL,
    months number(2) NOT NULL,
    mileage number(12) NOT NULL,
    CHECK(price > cost),
    CHECK(cost > 0),
    CHECK(price > 0),
    CHECK(months > 0),
    CHECK(mileage > 0)
);

INSERT INTO service VALUES ('OILCHG', 'Oil Change', 9.95, 10.95, 6, 6000);
INSERT INTO service VALUES ('TIREROTATE', 'Tire Rotation', 6.95, 9.95, 12, 12000);
INSERT INTO service VALUES ('FLUIDS', 'Fluid Replacement', 29.95, 49.96, 30, 30000);
INSERT INTO service VALUES ('TUNEUPBASIC', 'Basic Engine tune up', 69.95, 149.95, 18, 18000);
INSERT INTO service VALUES ('MULTIPOINTINSP', 'Multi-Point Inspection', 29.95, 59.95, 6, 6000);

INSERT INTO service VALUES ('WASH', 'Exterior Wash and Dry', 24.95, 34.99, 2, 2000);
INSERT INTO service VALUES ('PLSH', 'Polish', 100.00, 149.99, 6, 6000);
INSERT INTO service VALUES ('VCUM', 'Interior Vacuuming', 50.00, 84.99, 4, 4000);
INSERT INTO service VALUES ('TINT', 'Window Tint', 100.00, 199.99, 1, 120000);


CREATE TABLE part(
part_code varchar2(20) PRIMARY KEY,
description varchar2(100) NOT NULL,
cost number(11,2) NOT NULL,
price number(11,2) NOT NULL,
CHECK(price > cost),
CHECK(cost > 0),
CHECK(price > 0)
);


INSERT INTO part VALUES ('OIL10W30', 'Oil 10W30', 2.79, 3.95);
INSERT INTO part VALUES ('OILFILTER', 'Oil Filter', 6.95, 11.95);
INSERT INTO part VALUES ('WINSHIELDFLUID', 'Windshield fluid', 2.96, 4.95);
INSERT INTO part VALUES ('SPARKPLUG4', 'Spark Plug set (4)', 9.95, 19.95);
INSERT INTO part VALUES ('AIRFILTER', 'Air Filter', 3.95, 8.95);

INSERT INTO part VALUES ('CARBATTERY', 'Car Battery', 172.34, 193.99);
INSERT INTO part VALUES ('ALTERNATOR', 'Alternator', 186.74, 212.94);
INSERT INTO part VALUES ('RADIATOR', 'Radiator', 51.85, 67.96);
INSERT INTO part VALUES ('BRAKEPAD4', 'Brake Pad set (4)', 33.18, 42.49);


CREATE OR REPLACE VIEW service_list
AS SELECT service_code "Service Code", description "Service Description", cost "Cost", price "Price", months "Months", mileage "Mileage"
FROM service
ORDER BY service_code;

CREATE OR REPLACE VIEW part_list
AS SELECT part_code "Part Code", description "Part Description", cost "Cost", price "Price"
FROM part
ORDER BY part_code;


-- Task #4 A

/* Max Masajlo, Ryan Foltz, Zach Volpe  */

DROP TABLE sales_vehicle CASCADE CONSTRAINTS PURGE;
DROP TABLE service_vehicle CASCADE CONSTRAINTS PURGE;

CREATE TABLE sales_vehicle(
    vin varchar2(17) PRIMARY KEY,
    year number(4) NOT NULL,
    make varchar2(20) NOT NULL,
    model varchar2(20) NOT NULL,
    ext_color varchar2(25) NOT NULL,
    trim varchar2(25),
    mileage number(15) NOT NULL,
    condition varchar2(20) NOT NULL,
    status varchar2(20) NOT NULL,
    purchase_price number(10) NOT NULL,
    list_price number(10) NOT NULL,
    CHECK(status IN ('SOLD', 'FORSALE', 'TRADEIN')),
    CHECK(mileage >= 0),
    CHECK(purchase_price > 0),
    CHECK(list_price > 0)
);

CREATE TABLE service_vehicle(
    vin varchar2(17) PRIMARY KEY,
    year number(4) NOT NULL,
    make varchar2(20) NOT NULL,
    model varchar2(20) NOT NULL,
    mileage number(15) NOT NULL,
    CHECK(mileage >= 0)
);

/* We are assuming Larry requires all of the attributes listed as NOT NULL*/


--Task 5 

DROP TABLE service_invoice CASCADE CONSTRAINTS PURGE;
DROP TABLE sales_invoice CASCADE CONSTRAINTS PURGE;
DROP TABLE vendor CASCADE CONSTRAINTS PURGE;
DROP TABLE purchase_order CASCADE CONSTRAINTS PURGE;

CREATE TABLE service_invoice( 
    invoice_num     varchar2(4)     PRIMARY KEY,
    service_date    date            NOT NULL,
    customer_id     number(10)      references customer(customer_id) NOT NULL,
    vin             varchar2(17)    references service_vehicle(vin) NOT NULL,
    service_code    varchar2(20)    references service(service_code),
    part_code       varchar2(20)    references part(part_code),
    employee_id     number(4)       references employee(employee_id) NOT NULL,
    terms           varchar2(30)    NOT NULL,
    misc_charge     number(10,2),
    mileage         number(13),
    CHECK(NOT(service_code IS NULL AND part_code IS NULL)),
    CHECK(terms IN ('Credit', 'Cash', 'Check')),
    CHECK(misc_charge >= 0)
);



CREATE TABLE sales_invoice(
    invoice_num     varchar2(6)     PRIMARY KEY,
    sale_date       date            NOT NULL,
    customer_id     number(10)      references customer(customer_id) NOT NULL,
    vin             varchar2(17)    references sales_vehicle(vin) NOT NULL,
    salesman        number(4)       references employee(employee_id) NOT NULL,
    approvee        number(4)       references employee(employee_id),
    approved_date   date,
    terms           varchar2(30)    NOT NULL,
    trade_in_vin    varchar2(17)    references sales_vehicle(vin),
    misc_costs      number(10,2),
    discount        number(10,2),
    CHECK(terms IN ('Credit', 'Cash', 'Check')),
    CHECK(vin <> trade_in_vin),
    CHECK(misc_costs >= 0),
    CHECK(discount >= 0)
);

-- Assume we do not need an email for the vendor (1b in task 5 does not tell us to provide one)
CREATE TABLE vendor(
    vendor_id       varchar2(4)     PRIMARY KEY,
    vendor_name     varchar2(30)    NOT NULL,
    contact_fname   varchar2(30)    NOT NULL,
    contact_lname   varchar2(30)    NOT NULL,
    vendor_street   varchar2(30)    NOT NULL,
    vendor_city     varchar2(30)    NOT NULL,
    vendor_state    char(2)         NOT NULL,
    vendor_zip      varchar2(10)    NOT NULL,
    vendor_phone    varchar2(11)    NOT NULL,
    vendor_fax      varchar2(30)    NOT NULL,
    UNIQUE(vendor_phone),
    UNIQUE(vendor_fax),
    CHECK(vendor_id >= 3000)
);



CREATE TABLE purchase_order( 
    invoice_num     number(4)       PRIMARY KEY,
    purchase_date   date            NOT NULL,
    Vendor_id       varchar2(4)     references vendor(vendor_id) NOT NULL,
    purchaser       number(4)       references employee(employee_id) NOT NULL,
    terms           varchar2(30)    NOT NULL,
    vin             varchar2(17)    references sales_vehicle(vin) NOT NULL,
    CHECK(terms IN ('Credit', 'Cash', 'Check')),
    CHECK(invoice_num >= 5000)
);

-- PURCHASE ORDERS

-- Transaction 1 
insert into vendor values           (3000, 'Nikos Automobiles', 'Niko', 'Mollat', '123 fake data lane', 'Union City', 'CA', '94522', '9991113344', '4433111999');
insert into sales_vehicle values    ('vin1234', 2013, 'Chevy', 'Chevelle', 'Black', 'red', 90999, 'New', 'FORSALE', '22000', '35000' );
insert into purchase_order values   (5000, '03/12/2020', 3000, 1000, 'Cash', 'vin1234' );

--Transaction 2
insert into sales_vehicle values    ('vin4', 2019, 'Porsche' , '911', 'Blue', 'Silver', 112234, 'Used', 'FORSALE', '29000', '50000' );
insert into purchase_order values   (5003, '02/12/2021', 3000, 1000, 'Cash', 'vin4' );


--Transaction 3
insert into vendor values           (3001, 'Honda Dealership', 'Alex', 'Miller', '4632 Darth Lane', 'Chico', 'CA', '37321', '9928292344', '4439291181');
insert into sales_vehicle values    ('vin5', 2023, 'Dodge', 'Dart', 'Blue', 'Black', 0, 'New', 'FORSALE', '29000', '45000' );
insert into purchase_order values   (5004, '10/10/2020', 3001, 1008, 'Credit', 'vin5' );

--Transaction 4
insert into vendor values           (3002, 'Chad Deals', 'Chad', 'Mann', '6942 High St', 'El Dorado', 'CA', '94566', '8272536344', '4431928229');
insert into sales_vehicle values    ('vin6', 1996, 'Dodge' , 'Challenger', 'Blue', 'silver', 99000, 'Used', 'FORSALE', '18000', '26000' );
insert into purchase_order values   (5005, '12/14/2019', 3002, 1001, 'Credit', 'vin6' );


--Transaction 5
insert into vendor values           (3003, 'Foltz Vehicles', 'Barry', 'Foltz', '1221 Coral Way', 'San Clemente', 'CA', '94292', '9140293843', '1209384728');
insert into sales_vehicle values    ('vin2', 2015, 'Chevy', 'Corvette', 'Red', 'black', 512345, 'Used', 'FORSALE', '25000', '40000' );
insert into purchase_order values   (5001, '11/12/2022', 3003, 1001, 'Credit', 'vin2' );

--Transaction 6
insert into sales_vehicle values    ('vin7', 1999, 'Toyota' , 'Land Cruiser', 'Silver', 'Beige', 65486, 'Used', 'FORSALE', '21300', '25450' );
insert into purchase_order values   (5006, '05/23/2023', 3003, 1008, 'Cash', 'vin7' );


--Transaction 7
insert into vendor values           (3004, 'Vintage Car Dealership', 'Viktor', 'Sinclaire', '80 Beach St', 'Long Beach', 'CA', '92038', '8582129910', '99877853625');
insert into sales_vehicle values    ('vin3', 2018, 'Honda', 'HRV', 'Silver', 'gray', 0, 'New', 'FORSALE', '12450', '15000' );
insert into purchase_order values   (5002, '05/06/2023', 3004, 1004, 'Cash', 'vin3' );



--Sales Invoices

--Transaction 1 no trade-in vehicle
INSERT INTO sales_invoice   (invoice_num, sale_date, customer_id, VIN, salesman, terms) 
VALUES                      (4000, '05/17/2023', 1, 'vin2', 1010, 'Credit');

UPDATE sales_invoice 
SET approvee = 1000,
approved_date = '05/20/2023' 
WHERE invoice_num = 4000;

UPDATE sales_vehicle 
SET status = 'SOLD'
WHERE vin = 'vin2';

--TRansaction 2 no trade in vehicle
INSERT INTO sales_invoice   (invoice_num, sale_date, customer_id, VIN, salesman, terms) 
VALUES                      (4001, '04/12/2022', 1, 'vin3', 1009, 'Cash');

UPDATE sales_invoice 
SET approvee = 1008,
approved_date = '04/15/2022' 
WHERE invoice_num = 4001;

UPDATE sales_vehicle 
SET status = 'SOLD'
WHERE vin = 'vin3';

--Transaction 3 with trade in vehicle
INSERT INTO sales_vehicle VALUES    ('vin8', 2009, 'Dodge', 'Charger', 'Black', 'Red', '123000', 'Used', 'TRADEIN', 13000, 20000);

INSERT INTO sales_invoice   (invoice_num, sale_date, customer_id, VIN, salesman, terms, trade_in_vin)
VALUES                      (4002, '06/15/2022', 4, 'vin1234', 1009, 'Check', 'vin8');

UPDATE sales_invoice 
SET approvee = 1008,
approved_date = '06/15/2022' 
WHERE invoice_num = 4002;

UPDATE sales_vehicle 
SET status = 'SOLD'
WHERE vin = 'vin1234';

UPDATE sales_vehicle
SET status = 'FORSALE'
WHERE vin = 'vin8';

--Transaction 4 with trade in vehicle
INSERT INTO sales_vehicle VALUES ('vin9', 2018, 'Dodge', 'Challenger', 'Yellow', 'White', '12000', 'Used', 'TRADEIN', 18000, 29999);

INSERT INTO sales_invoice   (invoice_num, sale_date, customer_id, VIN, salesman, terms, trade_in_vin)
VALUES                      (4003, '08/22/2022', 5, 'vin5', 1008, 'Credit', 'vin9');

UPDATE sales_invoice 
SET approvee = 1008,
approved_date = '08/22/2022' 
WHERE invoice_num = 4003;

UPDATE sales_vehicle 
SET status = 'SOLD'
WHERE vin = 'vin5';

UPDATE sales_vehicle
SET status = 'FORSALE'
WHERE vin = 'vin9';

--Transaction 5 with trade in vehicle
INSERT INTO sales_vehicle VALUES ('vin10', 1994, 'Ford', 'Bronco', 'White', 'Silver', '145000', 'Used', 'TRADEIN', 8000, 14000);

INSERT INTO sales_invoice   (invoice_num, sale_date, customer_id, VIN, salesman, terms, trade_in_vin)
VALUES                      (4004, '05/14/2020', 6, 'vin6', 1010, 'Cash', 'vin10');

UPDATE sales_invoice 
SET approvee = 1008,
approved_date = '05/15/2020' 
WHERE invoice_num = 4004;

UPDATE sales_vehicle 
SET status = 'SOLD'
WHERE vin = 'vin6';

UPDATE sales_vehicle
SET status = 'FORSALE'
WHERE vin = 'vin10';





-- Service invoice  7 in total (3 sold by us // 3 not sold by us // )  (1 only service // 2 for only 1 part // 3 for 1 part & 1 service)

--Transaction 1 (part & service car sold by us)
INSERT INTO service_vehicle (vin, year, make, model, mileage) SELECT vin, year, make, model, mileage FROM sales_vehicle WHERE vin = 'vin2';

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, service_code, part_code, employee_id, terms)
VALUES                      (6000, '10/10/2021', 1, 'vin2', 'OILCHG', 'OIL10W30', 1005, 'Credit' );

--Transaction 2 (part & service car sold by us)
INSERT INTO service_vehicle (vin, year, make, model, mileage) SELECT vin, year, make, model, mileage FROM sales_vehicle WHERE vin = 'vin3';

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, service_code, part_code, employee_id, terms)
VALUES                      (6001, '11/12/2022', 2, 'vin3', 'TUNEUPBASIC', 'WINSHIELDFLUID', 1006, 'Check' );

--Transaction 3 (part & service car NOT sold by us)
INSERT INTO service_vehicle VALUES ('vin100', '2019', 'Ford', 'Raptor', '89000');

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, service_code, part_code, employee_id, terms)
VALUES                      (6002, '10/10/2021', 3, 'vin100', 'PLSH', 'CARBATTERY', 1005, 'Cash' );

--Transaction 4 (part car NOT sold by us)
INSERT INTO service_vehicle VALUES ('vin101', '2020', 'Dodge', 'Ram', '99000');

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, part_code, employee_id, terms)
VALUES                      (6003, '12/23/2022', 7, 'vin101', 'CARBATTERY', 1004, 'Cash' );


--Transaction 5 (part car NOT sold by us)
INSERT INTO service_vehicle VALUES ('vin102', '2023', 'Chevrolet', 'Corvette', '12000');

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, part_code, employee_id, terms)
VALUES                      (6004, '01/23/2023', 8, 'vin102', 'RADIATOR', 1006, 'Check' );

--Transaction 6 (service car NOT sold by us)
INSERT INTO service_vehicle VALUES ('vin103', '1969', 'Dodge', 'Charger', '400000');

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, service_code, employee_id, terms)
VALUES                      (6005, '10/10/2021', 3, 'vin100', 'TIREROTATE', 1004, 'Credit' );

--Transaction 7 (service car sold by us)
INSERT INTO service_vehicle (vin, year, make, model, mileage) SELECT vin, year, make, model, mileage FROM sales_vehicle WHERE vin = 'vin5';

INSERT INTO service_invoice (invoice_num, service_date, customer_id, vin, service_code, employee_id, terms)
VALUES                      (6006, '05/31/2023', 5, 'vin5', 'MULTIPOINTINSP', 1005, 'Credit' );


-- customers who haven't bought a car from us (3,7,8,9,10)
-- service Techs 1004 1005 1006



-- Queries

-- Car seller list
CREATE OR REPLACE VIEW vendor_list
AS SELECT vendor_name "Vendor Name", contact_fname ||' '|| contact_lname "Contact Name", vendor_street ||', '|| vendor_city ||' '|| vendor_state ||' '|| vendor_zip "Vendor Address",
          vendor_phone "Phone Number", vendor_fax "Fax"
FROM vendor
ORDER BY vendor_name;


-- Vehicle sales List
-- NEED TO ADD ORDER BY CLAUSE

CREATE OR REPLACE VIEW vehicle_sales_list ("Sales date", "Invoice Number", "Terms","Sales Person", "Approved By", "Date Approved",  "Customer name", "Customer Address", "Customer Phone", "Customer Email",
                       "Vehicle VIN", "Vehicle Year", "Vehicle Make", "Vehicle Model", "Exterior Color", "Trim", "List Base Price", "Mileage", "Condition",
                       "Trade in VIN", "Trade in Year", "Trade in Make", "Trade in Model", "Trade in Exterior Color", "Trade in Trim", "Trade in List Base Price", "Trade in Mileage", "Trade in Condition",
                       "Selling Price", "Miscellaneous Costs", "Discount", "Trade Allowance", "Subtotal", "Taxes", "Total Selling Price")

 AS SELECT s.sale_date, s.invoice_num, s.terms, e.first_name ||' '|| e.last_name, m.first_name ||' '|| m.last_name, s.approved_date, c.first_name ||' '|| c.last_name, c.street ||', '|| c.city ||' '|| c.state_code ||' '|| c.zip_code, c.phone, c.email,
            v.vin, v.year, v.make, v.model, v.ext_color, v.trim, v.list_price, v.mileage, v.condition, t.vin, t.year, t.make, t.model, t.ext_color, t.trim, t.mileage, t.condition, t.purchase_price,
            v.list_price, NVL(s.misc_costs,0), NVL(s.discount,0), NVL(t.purchase_price,0), 
            (v.list_price + NVL(s.misc_costs,0) - NVL(s.discount,0) - NVL(t.purchase_price,0) ), (v.list_price + NVL(s.misc_costs,0) - NVL(s.discount,0) - NVL(t.purchase_price,0) )*.0725,
            (v.list_price + NVL(s.misc_costs,0) - NVL(s.discount,0) - NVL(t.purchase_price,0) ) + ((v.list_price + NVL(s.misc_costs,0) - NVL(s.discount,0) - NVL(t.purchase_price,0) )*.0725)

FROM sales_invoice s JOIN customer c
ON (s.customer_id = c.customer_id)

JOIN employee e
ON (e.employee_id = s.salesman)

LEFT OUTER JOIN employee m
ON (m.employee_id = s.approvee)

JOIN sales_vehicle v
ON (s.vin = v.vin)

LEFT OUTER JOIN sales_vehicle t
ON (s.trade_in_vin = t.vin)

ORDER BY s.invoice_num;




-- Vehicle Purchase list
-- Assume we do not need an email for the vendor

CREATE OR REPLACE VIEW vehicle_purchase_list ("Purchase date", "Invoice Number", "Terms", "Purchase By", "Vendor name", "Vendor Contact Info", "Vendor Address", "Vendor Phone", "Vendor Fax",
                       "Vehicle VIN", "Vehicle Year", "Vehicle Make", "Vehicle Model", "Exterior Color", "Trim", "List Base Price", "Mileage", "Condition", "Sales Amount", "shipping", "Taxes", "Total Selling Price")

AS SELECT p.purchase_date, p.invoice_num, p.terms, e.first_name ||' '|| e.last_name, v.vendor_name, v.contact_fname ||' '|| v.contact_lname,
          v.vendor_street ||', '|| v.vendor_city ||' '|| v.vendor_state ||' '|| v.vendor_zip, v.vendor_phone, v.vendor_fax,
          c.vin, c.year, c.make, c.model, c.ext_color, c.trim, c.purchase_price, c.mileage, c.condition, c.purchase_price,
          (c.purchase_price*.05), (c.purchase_price + (purchase_price*.05))* .0725, (c.purchase_price + (purchase_price*.05) + ((c.purchase_price + (purchase_price*.05))* .0725))

 FROM purchase_order p LEFT OUTER JOIN employee e 
 ON (p.purchaser = e.employee_id)

 JOIN vendor v 
 ON (v.vendor_id = p.vendor_id)

 JOIN sales_vehicle c
 ON (c.vin = p.vin);



 -- Service Invoice List

 CREATE OR REPLACE VIEW service_invoice_list ("Service date", "Invoice Number", "Terms", "Service Person", "Customer name", "Customer Address", "Customer Phone", "Customer Email",
                        "Vehicle VIN", "Make", "Model", "Vehicle Mileage", "Service Code", "Service Description", "Service Charge", "Parts code", "Parts Description", "Parts Charge",
                        "Total Service Charges", "Total Parts Charges", "Total Charges", "Misc", "Taxes", "Total")

AS SELECT s.service_date, s.invoice_num, s.terms, e.first_name ||' '|| e.last_name, c.first_name ||' '|| c.last_name, c.street ||', '|| c.city ||' '|| c.state_code ||' '|| c.zip_code, c.phone, c.email,
          v.vin, v.make, v.model, v.mileage, se.service_code, se.description, NVL(se.price,0), p.part_code, p.description, NVL(p.price,0),
          NVL(se.price,0), NVL(p.price,0), (NVL(se.price,0) + NVL(p.price,0)), NVL(s.misc_charge,0)  ,( NVL(se.price,0) + NVL(p.price,0) + NVL(s.misc_charge,0) ) * .0725,
          ( NVL(se.price,0) + NVL(p.price,0) + NVL(s.misc_charge,0) ) + (( NVL(se.price,0) + NVL(p.price,0) + NVL(s.misc_charge,0) ) * .0725)

FROM service_invoice s JOIN employee e
ON (s.employee_id = e.employee_id)

JOIN customer c 
ON (c.customer_id = s.customer_id)

JOIN service_vehicle v
ON (v.vin = s.vin)

LEFT OUTER JOIN service se
ON (se.service_code = s.service_code)

LEFT OUTER JOIN part p
ON (p.part_code = s.part_code);





--Task 4b

CREATE OR REPLACE VIEW vehicle_list_4b
    ("VIN", "Year", "Make", "Model", "Exterior Color", "Trim", 
    "Mileage", "Condition", "Status", "Base Price")
AS SELECT vin, year, make, model, ext_color, trim, mileage, condition, status, list_price
    FROM sales_vehicle 
    ORDER BY make, model;

CREATE OR REPLACE VIEW vehicle_list_for_sale_4b
    ("VIN", "Year", "Make", "Model", "Exterior Color", "Trim", 
    "Mileage", "Condition", "Status", "Base Price")
AS SELECT vin, year, make, model, ext_color, trim, mileage, condition, status, list_price
    FROM sales_vehicle 
    WHERE status = 'FORSALE'
    ORDER BY make, model;

CREATE OR REPLACE VIEW vehicle_list_sold_4b
    ("VIN", "Year", "Make", "Model", "Mileage", "Condition", "Base Price")
AS SELECT vin, year, make, model, mileage, condition, list_price
    FROM sales_vehicle 
    WHERE status = 'SOLD'
    ORDER BY make, model;

CREATE OR REPLACE VIEW vehicle_inventory_value_4b
    ("Total Value For Sale")
AS SELECT SUM(list_price)
FROM sales_vehicle
WHERE status = 'FORSALE';

CREATE OR REPLACE VIEW vehicle_inventory_value_by_make_4b
    ("Make", "Total Value")
AS SELECT make, SUM(list_price)
FROM sales_vehicle
GROUP BY make;




-- Task 6



-- Customer Reports 

-- 1) List of customers who have purchased a car from us: Customer name, Phone
CREATE OR REPLACE VIEW vehicle_purchase_list_6
("Customer Name", "Phone")
AS SELECT first_name ||' '|| last_name, phone
FROM customer
WHERE customer_id IN (SELECT customer_id from sales_invoice);

-- 2) Number of customers grouped by city: City, number of customers in that city
CREATE OR REPLACE VIEW customers_by_city_6
("City", "Number of customers in City")
AS SELECT city, COUNT(customer_id)
FROM customer
GROUP BY city;

-- 3) List of customers who have purchased a car from us but have not had a car serviced with us: Customer Name, Phone
CREATE OR REPLACE VIEW vehicle_purchase_noservice_list_6
("Customer Name", "Phone")
AS SELECT first_name ||' '|| last_name, phone
FROM customer
WHERE customer_id IN (SELECT customer_id from sales_invoice)
AND 
customer_id NOT IN (SELECT customer_id from service_invoice);


-- 4) List of all customers who are interested in a Porsche (or choose a vehicle type if you don’t have
-- a Porsche in the list of interests) and their interest is still relevant (i.e., end date hasn’t passed ...
--include those who have a null value for the end date): Customer Name, Phone, End date

CREATE OR REPLACE VIEW porsche_preference_6
("Customer Name", "Phone", "End Date")
AS SELECT c.first_name ||' '|| c.last_name, c.phone, p.end_date
FROM customer c JOIN preference p
ON (c.customer_id = p.customer_id)
WHERE c.customer_id IN (SELECT p.customer_id from preference WHERE p.vehicle_make = 'Porsche') 
AND 
SYSDATE < ANY (SELECT p.end_date from preference WHERE p.vehicle_make = 'Porsche');

-- 5) List of customers who bought a car from us and did not bring in a trade in. Customer Names
CREATE OR REPLACE VIEW vehicle_purchase_notrade_6
("Customer Name")
AS SELECT first_name ||' '|| last_name
FROM customer
WHERE customer_id IN (SELECT customer_id from sales_invoice WHERE trade_in_vin IS NULL);


-- 6) List of best Customer (two queries, one for each of the following):

-- a. Highest number of car’s purchased: Customer Name, number of cars purchased
CREATE OR REPLACE VIEW best_customer_6
("Customer Name", "Number of Cars Purchased")
AS SELECT c.first_name || ' ' || c.last_name, COUNT(s.customer_id)
FROM customer c JOIN sales_invoice s 
ON (c.customer_id = s.customer_id)
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY COUNT(s.customer_id) DESC
FETCH FIRST 1 ROW ONLY;

-- b. Highest total profit we made from the customer: Customer Name, sum of profit from all
-- the cars they bought (Selling price less discount ... do not include TradeIn allowances in calculating profit)
CREATE OR REPLACE VIEW best_profit_6
("Customer Name", "Total Profit")
AS SELECT c.first_name || ' ' || c.last_name, SUM(s.list_price - NVL(si.discount,0))
FROM customer c JOIN sales_invoice si ON (c.customer_id = si.customer_id)
JOIN sales_vehicle s ON (s.vin = si.vin)
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY SUM(s.list_price - NVL(si.discount,0)) DESC
FETCH FIRST 1 ROW ONLY;


-- Purchasing Reports

-- 7) List the Manufacturer that we paid the most amount of total dollars to (this is not just the
--    highest for one car purchase but the sum of money paid to a manufacturer for all the cars
--    bought from them): Manufacturer Name, total amount paid (show ties)

CREATE OR REPLACE VIEW highest_vendor_6
("Vendor Name", "Total Amount Paid")
AS SELECT v.vendor_name, SUM(s.purchase_price)
FROM vendor v JOIN purchase_order p 
ON (v.vendor_id = p.vendor_id)
JOIN sales_vehicle s
ON (p.vin = s.vin)
GROUP BY v.vendor_name
ORDER BY SUM(s.purchase_price) DESC
FETCH FIRST 1 ROW WITH TIES;


-- 8) List the manufacturer that sold us the most number of vehicles? Manufacturer Name, total
--    number of cars sold to use (show ties)
CREATE OR REPLACE VIEW vendor_most_cars_6
("Vendor Name", "Total Number of Cars Sold")
AS SELECT v.vendor_name, COUNT(p.vendor_id)
FROM vendor v JOIN purchase_order p 
ON (v.vendor_id = p.vendor_id)
GROUP BY v.vendor_name
ORDER BY COUNT(p.vendor_id) DESC
FETCH FIRST 1 ROW WITH TIES;



-- Sales Reports

-- 9) List of cars sold by us in the past 30 days of the date the query is being run (i.e., you cannot
--    hard code the date): VIN, Make, Model, List Price
CREATE OR REPLACE VIEW cars_sold_30days_6
("VIN", "Make", "Model", "List price")
AS SELECT vin, make, model, list_price
FROM sales_vehicle
WHERE vin IN (SELECT vin FROM sales_invoice WHERE sale_date > (SYSDATE - 30));



-- 10) 10. Most popular make of car sold (which make of car was sold the most times): Make, Number Sold (show ties)
CREATE OR REPLACE VIEW best_model_6
("Make", "Number Sold")
AS SELECT make, COUNT(vin)
FROM sales_vehicle
WHERE status = 'SOLD'
GROUP BY make
ORDER BY COUNT(vin) DESC
FETCH FIRST 1 ROW WITH TIES;

-- 11) Sum of the total profit from car sales (cost of vehicle less selling price less discount): Amount
CREATE OR REPLACE VIEW car_sales_profit_6
("Amount")
AS SELECT SUM(s.list_price - s.purchase_price - NVL(si.discount,0))
FROM sales_invoice si JOIN sales_vehicle s ON (s.vin = si.vin);


-- 12) 12. List of best “Sales Person” (two queries, one for each of the following)

-- a) Highest commissions: Sales person name, total commissions earned (show ties)
CREATE OR REPLACE VIEW best_commission_6
("Sales Person", "Commission")
AS SELECT e.first_name||' '||e.last_name, SUM((v.list_price*NVL(e.commission_pct,0)))
FROM employee e
JOIN sales_invoice si
ON (e.employee_id = si.salesman)
JOIN sales_vehicle v
ON (si.vin = v.vin)
GROUP BY si.salesman, e.first_name, e.last_name
ORDER BY SUM((v.list_price*NVL(e.commission_pct,0))) DESC
FETCH FIRST 1 ROW WITH TIES;


-- b) Highest number of cars sold: Sales person name, number of vehicles sold. (show ties)
CREATE OR REPLACE VIEW most_cars_sold_6
("Sales Person", "Number of Vehicles Sold")
AS SELECT e.first_name||' '||e.last_name, COUNT(si.salesman)
FROM employee e JOIN sales_invoice si
ON e.employee_id = si.salesman
GROUP BY e.first_name, e.last_name, si.salesman
ORDER BY COUNT(vin) DESC
FETCH FIRST 1 ROW WITH TIES;


-- Service Reports

-- 13. Sum of profits (price less cost) for all services performed where the profits are grouped by
--     service code / service name (show both): Service Code, Service Name, Total Profit.
CREATE OR REPLACE VIEW sum_profits_of_service_6
("Service Code", "Service Name", "Total Profit")
AS SELECT s.service_code, s.description, SUM(s.price) - SUM(s.cost)
FROM service s JOIN service_invoice si
ON s.service_code = si.service_code
GROUP BY s.service_code, s.description;


-- 14. Sum of profits (price less cost) for all parts sold where the profits are grouped by part code /
--     part name (show both): Part Code, Part Name, Total Profit.
CREATE OR REPLACE VIEW sum_profits_of_parts_6
("Part Code", "Part Name", "Total Profit")
AS SELECT p.part_code, p.description, SUM(p.price) - SUM(p.cost)
FROM part p JOIN service_invoice si
ON p.part_code = si.part_code
GROUP BY p.part_code, p.description;